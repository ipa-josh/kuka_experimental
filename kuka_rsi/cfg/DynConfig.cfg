#! /usr/bin/env python
# Forearm camera configuration

PACKAGE='ipa_kuka_rsi'
import roslib; roslib.load_manifest(PACKAGE)

from math import pi

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()
frames = gen#gen.add_group("Frames")
frames.add("tip_link",             str_t,    SensorLevels.RECONFIGURE_RUNNING,
        "link name of tip of the arm",
        "tip")
frames.add("base_link",             str_t,    SensorLevels.RECONFIGURE_RUNNING,
        "link name of the base of the arm",
        "base")

RSI = gen#gen.add_group("RSI")
RSI.add("RSI_joint_name",             str_t,    SensorLevels.RECONFIGURE_RUNNING,
        "name of the RSI property for setting joint angles (default: ASPos)",
        "ASPos")
RSI.add("RSI_cart_name",             str_t,    SensorLevels.RECONFIGURE_RUNNING,
        "name of the RSI property for setting cart. pose (default: RSol)",
        "RSol")

general = gen#gen.add_group("General")
general.add("tolerance",          double_t, SensorLevels.RECONFIGURE_RUNNING,
        "tolerance in rad when goal counts as reached",
         0.01, 0, 0.1)
general.add("max_velocity",          double_t, SensorLevels.RECONFIGURE_RUNNING,
        "max. velocity for joint movement",
         0.1, 0, 0.1)
general.add("frequency",          int_t, SensorLevels.RECONFIGURE_RUNNING,
        "frequency to publish joint states and diagnostics",
         30, 1, 100)
mm_enum = gen.enum([ gen.const("Cartesian",     int_t, 0, "Cartesian based movement"),
					 gen.const("Joint",      	int_t, 1, "Joint based movement")],
                     "Motion mode")

general.add("motion_mode", int_t, 0, "Motion Mode", 0, 0, 1, edit_method=mm_enum)

exit(gen.generate(PACKAGE, "driver", "Dyn"))
